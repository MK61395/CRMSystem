{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/customer.service\";\nimport * as i2 from \"@angular/forms\";\nexport class CustomerListComponent {\n  constructor(customerService, fb) {\n    this.customerService = customerService;\n    this.fb = fb;\n    this.customers = [];\n    this.loading = true;\n    this.error = null;\n    this.editingCustomer = null;\n    this.showForm = false;\n    this.customerForm = this.fb.group({\n      name: ['', [Validators.required, Validators.minLength(2)]],\n      email: ['', [Validators.required, Validators.email]],\n      phoneNumber: ['', [Validators.required, Validators.pattern('^[0-9-]+$')]]\n    });\n  }\n  ngOnInit() {\n    this.loadCustomers();\n  }\n  loadCustomers() {\n    this.loading = true;\n    this.customerService.getAllCustomers().subscribe({\n      next: data => {\n        this.customers = data;\n        this.loading = false;\n      },\n      error: error => {\n        this.error = error;\n        this.loading = false;\n      }\n    });\n  }\n  onSubmit() {\n    if (this.customerForm.valid) {\n      if (this.editingCustomer) {\n        this.customerService.updateCustomer(this.editingCustomer.id, {\n          ...this.editingCustomer,\n          ...this.customerForm.value\n        }).subscribe({\n          next: () => {\n            this.loadCustomers();\n            this.resetForm();\n          },\n          error: error => this.error = error\n        });\n      } else {\n        this.customerService.createCustomer(this.customerForm.value).subscribe({\n          next: () => {\n            this.loadCustomers();\n            this.resetForm();\n          },\n          error: error => this.error = error\n        });\n      }\n    }\n  }\n  editCustomer(customer) {\n    this.editingCustomer = customer;\n    this.customerForm.patchValue(customer);\n    this.showForm = true;\n  }\n  deleteCustomer(id) {\n    if (confirm('Are you sure you want to delete this customer?')) {\n      this.customerService.deleteCustomer(id).subscribe({\n        next: () => this.loadCustomers(),\n        error: error => this.error = error\n      });\n    }\n  }\n  resetForm() {\n    this.customerForm.reset();\n    this.editingCustomer = null;\n    this.showForm = false;\n  }\n}\nCustomerListComponent.ɵfac = function CustomerListComponent_Factory(t) {\n  return new (t || CustomerListComponent)(i0.ɵɵdirectiveInject(i1.CustomerService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n};\nCustomerListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CustomerListComponent,\n  selectors: [[\"app-customer-list\"]],\n  decls: 0,\n  vars: 0,\n  template: function CustomerListComponent_Template(rf, ctx) {},\n  styles: [\".card[_ngcontent-%COMP%] {\\r\\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\\r\\n}\\r\\n\\r\\n.card-header[_ngcontent-%COMP%] {\\r\\n  background-color: #f8f9fa;\\r\\n}\\r\\n\\r\\n.table[_ngcontent-%COMP%] {\\r\\n  margin-bottom: 0;\\r\\n}\\r\\n\\r\\n.btn-sm[_ngcontent-%COMP%] {\\r\\n  padding: 0.25rem 0.5rem;\\r\\n  font-size: 0.875rem;\\r\\n}\\r\\n\\r\\n.form-control[_ngcontent-%COMP%]:focus {\\r\\n  border-color: #80bdff;\\r\\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\\r\\n}\\r\\n\\r\\n.alert[_ngcontent-%COMP%] {\\r\\n  margin-bottom: 1rem;\\r\\n}\\r\\n\\r\\n.table-responsive[_ngcontent-%COMP%] {\\r\\n  margin-top: 1rem;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9jdXN0b21lci1saXN0L2N1c3RvbWVyLWxpc3QuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLG1EQUFtRDtBQUNyRDs7QUFFQTtFQUNFLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLHVCQUF1QjtFQUN2QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsZ0RBQWdEO0FBQ2xEOztBQUVBO0VBQ0UsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCIiwic291cmNlc0NvbnRlbnQiOlsiLmNhcmQge1xyXG4gIGJveC1zaGFkb3c6IDAgMC4xMjVyZW0gMC4yNXJlbSByZ2JhKDAsIDAsIDAsIDAuMDc1KTtcclxufVxyXG5cclxuLmNhcmQtaGVhZGVyIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO1xyXG59XHJcblxyXG4udGFibGUge1xyXG4gIG1hcmdpbi1ib3R0b206IDA7XHJcbn1cclxuXHJcbi5idG4tc20ge1xyXG4gIHBhZGRpbmc6IDAuMjVyZW0gMC41cmVtO1xyXG4gIGZvbnQtc2l6ZTogMC44NzVyZW07XHJcbn1cclxuXHJcbi5mb3JtLWNvbnRyb2w6Zm9jdXMge1xyXG4gIGJvcmRlci1jb2xvcjogIzgwYmRmZjtcclxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgwLCAxMjMsIDI1NSwgMC4yNSk7XHJcbn1cclxuXHJcbi5hbGVydCB7XHJcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTtcclxufVxyXG5cclxuLnRhYmxlLXJlc3BvbnNpdmUge1xyXG4gIG1hcmdpbi10b3A6IDFyZW07XHJcbn0gIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","CustomerListComponent","constructor","customerService","fb","customerForm","group","name","required","minLength","email","phoneNumber","pattern","ngOnInit","loadCustomers","loading","getAllCustomers","subscribe","next","data","customers","error","onSubmit","valid","editingCustomer","updateCustomer","id","value","resetForm","createCustomer","editCustomer","customer","patchValue","showForm","deleteCustomer","confirm","reset","selectors","decls","vars","template","styles"],"sourceRoot":"","sources":["D:\\Visual Studio 2022\\CRMSystem\\ClientApp\\src\\app\\components\\customer-list\\customer-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { CustomerService, Customer } from '../../services/customer.service';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-customer-list',\r\n  templateUrl: './customer-list.component.html',\r\n  styleUrls: ['./customer-list.component.css']\r\n})\r\nexport class CustomerListComponent implements OnInit {\r\n  customers: Customer[] = [];\r\n  loading = true;\r\n  error: string | null = null;\r\n  customerForm: FormGroup;\r\n  editingCustomer: Customer | null = null;\r\n  showForm = false;\r\n\r\n  constructor(\r\n    private customerService: CustomerService,\r\n    private fb: FormBuilder\r\n  ) {\r\n    this.customerForm = this.fb.group({\r\n      name: ['', [Validators.required, Validators.minLength(2)]],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      phoneNumber: ['', [Validators.required, Validators.pattern('^[0-9-]+$')]]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loadCustomers();\r\n  }\r\n\r\n  loadCustomers() {\r\n    this.loading = true;\r\n    this.customerService.getAllCustomers().subscribe({\r\n      next: (data) => {\r\n        this.customers = data;\r\n        this.loading = false;\r\n      },\r\n      error: (error) => {\r\n        this.error = error;\r\n        this.loading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.customerForm.valid) {\r\n      if (this.editingCustomer) {\r\n        this.customerService.updateCustomer(\r\n          this.editingCustomer.id,\r\n          { ...this.editingCustomer, ...this.customerForm.value }\r\n        ).subscribe({\r\n          next: () => {\r\n            this.loadCustomers();\r\n            this.resetForm();\r\n          },\r\n          error: (error) => this.error = error\r\n        });\r\n      } else {\r\n        this.customerService.createCustomer(this.customerForm.value).subscribe({\r\n          next: () => {\r\n            this.loadCustomers();\r\n            this.resetForm();\r\n          },\r\n          error: (error) => this.error = error\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  editCustomer(customer: Customer) {\r\n    this.editingCustomer = customer;\r\n    this.customerForm.patchValue(customer);\r\n    this.showForm = true;\r\n  }\r\n\r\n  deleteCustomer(id: number) {\r\n    if (confirm('Are you sure you want to delete this customer?')) {\r\n      this.customerService.deleteCustomer(id).subscribe({\r\n        next: () => this.loadCustomers(),\r\n        error: (error) => this.error = error\r\n      });\r\n    }\r\n  }\r\n\r\n  resetForm() {\r\n    this.customerForm.reset();\r\n    this.editingCustomer = null;\r\n    this.showForm = false;\r\n  }\r\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}