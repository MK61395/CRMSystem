{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CustomerService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = '/api/customer';\n  }\n  getAllCustomers() {\n    return this.http.get(this.apiUrl).pipe(tap(customers => console.log('Fetched customers:', customers)), catchError(this.handleError));\n  }\n  searchCustomers(searchTerm, sortBy, sortDirection) {\n    let params = new HttpParams().set('searchTerm', searchTerm).set('sortBy', sortBy).set('sortDirection', sortDirection);\n    return this.http.get(`${this.apiUrl}/search`, {\n      params\n    }).pipe(catchError(this.handleError));\n  }\n  getCustomer(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n  }\n  createCustomer(customer) {\n    return this.http.post(this.apiUrl, customer).pipe(catchError(this.handleError));\n  }\n  updateCustomer(id, customer) {\n    return this.http.put(`${this.apiUrl}/${id}`, customer).pipe(catchError(this.handleError));\n  }\n  deleteCustomer(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = 'An error occurred';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.error(errorMessage);\n    return throwError(() => errorMessage);\n  }\n}\nCustomerService.ɵfac = function CustomerService_Factory(t) {\n  return new (t || CustomerService)(i0.ɵɵinject(i1.HttpClient));\n};\nCustomerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CustomerService,\n  factory: CustomerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAwCA,UAAU,QAAQ,sBAAsB;AAChF,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAYhD,OAAM,MAAOC,eAAe;EAG1BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,eAAe;EAEQ;EAExCC,eAAe;IACb,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAa,IAAI,CAACC,MAAM,CAAC,CAACC,IAAI,CAChDP,GAAG,CAACQ,SAAS,IAAIC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,SAAS,CAAC,CAAC,EAC9DT,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACH;EAEAC,eAAe,CAACC,UAAkB,EAAEC,MAAc,EAAEC,aAAqB;IACvE,IAAIC,MAAM,GAAG,IAAInB,UAAU,EAAE,CAC1BoB,GAAG,CAAC,YAAY,EAAEJ,UAAU,CAAC,CAC7BI,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,eAAe,EAAEF,aAAa,CAAC;IAEtC,OAAO,IAAI,CAACZ,IAAI,CAACE,GAAG,CAAa,GAAG,IAAI,CAACC,MAAM,SAAS,EAAE;MAAEU;IAAM,CAAE,CAAC,CAACT,IAAI,CACxER,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACH;EAEAO,WAAW,CAACC,EAAU;IACpB,OAAO,IAAI,CAAChB,IAAI,CAACE,GAAG,CAAW,GAAG,IAAI,CAACC,MAAM,IAAIa,EAAE,EAAE,CAAC,CAACZ,IAAI,CACzDR,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACH;EAEAS,cAAc,CAACC,QAA8B;IAC3C,OAAO,IAAI,CAAClB,IAAI,CAACmB,IAAI,CAAW,IAAI,CAAChB,MAAM,EAAEe,QAAQ,CAAC,CAACd,IAAI,CACzDR,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACH;EAEAY,cAAc,CAACJ,EAAU,EAAEE,QAAkB;IAC3C,OAAO,IAAI,CAAClB,IAAI,CAACqB,GAAG,CAAW,GAAG,IAAI,CAAClB,MAAM,IAAIa,EAAE,EAAE,EAAEE,QAAQ,CAAC,CAACd,IAAI,CACnER,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACH;EAEAc,cAAc,CAACN,EAAU;IACvB,OAAO,IAAI,CAAChB,IAAI,CAACuB,MAAM,CAAO,GAAG,IAAI,CAACpB,MAAM,IAAIa,EAAE,EAAE,CAAC,CAACZ,IAAI,CACxDR,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACH;EAEQA,WAAW,CAACgB,KAAwB;IAC1C,IAAIC,YAAY,GAAG,mBAAmB;IACtC,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrCD,YAAY,GAAG,UAAUD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;KAC/C,MAAM;MACLF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEzErB,OAAO,CAACkB,KAAK,CAACC,YAAY,CAAC;IAC3B,OAAO9B,UAAU,CAAC,MAAM8B,YAAY,CAAC;EACvC;;AAxDW3B,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAA+B,SAAf/B,eAAe;EAAAgC,YAFd;AAAM","names":["HttpParams","throwError","catchError","tap","CustomerService","constructor","http","getAllCustomers","get","apiUrl","pipe","customers","console","log","handleError","searchCustomers","searchTerm","sortBy","sortDirection","params","set","getCustomer","id","createCustomer","customer","post","updateCustomer","put","deleteCustomer","delete","error","errorMessage","ErrorEvent","message","status","factory","providedIn"],"sourceRoot":"","sources":["D:\\Visual Studio 2022\\CRMSystem\\ClientApp\\src\\app\\services\\customer.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\n\nexport interface Customer {\n  id: number;\n  name: string;\n  email: string;\n  phoneNumber: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomerService {\n  private apiUrl = '/api/customer';\n\n  constructor(private http: HttpClient) { }\n\n  getAllCustomers(): Observable<Customer[]> {\n    return this.http.get<Customer[]>(this.apiUrl).pipe(\n      tap(customers => console.log('Fetched customers:', customers)),\n      catchError(this.handleError)\n    );\n  }\n\n  searchCustomers(searchTerm: string, sortBy: string, sortDirection: string): Observable<Customer[]> {\n    let params = new HttpParams()\n      .set('searchTerm', searchTerm)\n      .set('sortBy', sortBy)\n      .set('sortDirection', sortDirection);\n\n    return this.http.get<Customer[]>(`${this.apiUrl}/search`, { params }).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  getCustomer(id: number): Observable<Customer> {\n    return this.http.get<Customer>(`${this.apiUrl}/${id}`).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  createCustomer(customer: Omit<Customer, 'id'>): Observable<Customer> {\n    return this.http.post<Customer>(this.apiUrl, customer).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  updateCustomer(id: number, customer: Customer): Observable<Customer> {\n    return this.http.put<Customer>(`${this.apiUrl}/${id}`, customer).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  deleteCustomer(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    let errorMessage = 'An error occurred';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.error(errorMessage);\n    return throwError(() => errorMessage);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}